--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -205,6 +205,11 @@ struct hostapd_nai_realm_data {
 	} eap_method[MAX_NAI_EAP_METHODS];
 };
 
+struct hostapd_ie_filter {
+	u8 tag;
+	u8 oui[3];
+};
+
 /**
  * struct hostapd_bss_config - Per-BSS configuration
  */
@@ -536,6 +541,7 @@ struct hostapd_bss_config {
 #endif /* CONFIG_RADIUS_TEST */
 
 	struct wpabuf *vendor_elements;
+	struct hostapd_ie_filter ief;
 
 	unsigned int sae_anti_clogging_threshold;
 	int *sae_groups;
--- a/src/ap/beacon.c
+++ b/src/ap/beacon.c
@@ -894,6 +894,9 @@ void handle_probe_req(struct hostapd_data *hapd,
 	}
 #endif /* CONFIG_P2P */
 
+	if (hapd->conf->ief.tag)
+		req.ie = ieee802_11_vie_get(ie, ie_len, hapd->conf->ief.tag, hapd->conf->ief.oui);
+
 	if (hostapd_ubus_handle_event(hapd, &req)) {
 		wpa_printf(MSG_DEBUG, "Probe request for " MACSTR " rejected by ubus handler.\n",
 		       MAC2STR(mgmt->sa));
--- a/src/ap/ubus.c
+++ b/src/ap/ubus.c
@@ -248,6 +248,18 @@ blobmsg_add_macaddr(struct blob_buf *buf, const char *name, const u8 *addr)
 	blobmsg_add_string_buffer(buf);
 }
 
+static void
+blobmsg_add_ie(struct blob_buf *buf, const char *name, const u8 *ie)
+{
+	char *s;
+	u32 ielen = *(ie + 1) + 2;
+	u32 slen = ielen << 1 + 1;
+
+	s = blobmsg_alloc_string_buffer(buf, name, slen);
+	wpa_snprintf_hex(s, slen, ie, ielen);
+	blobmsg_add_string_buffer(buf);
+}
+
 static int
 hostapd_bss_list_bans(struct ubus_context *ctx, struct ubus_object *obj,
 		      struct ubus_request_data *req, const char *method,
@@ -497,6 +509,8 @@ int hostapd_ubus_handle_event(struct hostapd_data *hapd, struct hostapd_ubus_req
 	if (req->frame_info)
 		blobmsg_add_u32(&b, "signal", req->frame_info->ssi_signal);
 	blobmsg_add_u32(&b, "freq", hapd->iface->freq);
+	if (req->type == HOSTAPD_UBUS_PROBE_REQ && req->ie)
+		blobmsg_add_ie(&b, "ie", req->ie);
 	if (req->type == HOSTAPD_UBUS_ASSOC_REQ ||
 	    (req->type == HOSTAPD_UBUS_AUTH_REQ && !req->online))
 		blobmsg_add_u32(&b, "online", req->online);
--- a/src/ap/ubus.h
+++ b/src/ap/ubus.h
@@ -20,6 +20,7 @@ struct hostapd_ubus_request {
 	const struct ieee80211_mgmt *mgmt_frame;
 	const struct hostapd_frame_info *frame_info;
 	const u8 *addr;
+	const u8 *ie;
 	int online;
 };
 
--- a/src/common/ieee802_11_common.c
+++ b/src/common/ieee802_11_common.c
@@ -172,7 +172,38 @@ static int ieee802_11_parse_vendor_specific(const u8 *pos, size_t elen,
 
 	return 0;
 }
+/**
+ * ieee802_11_vie_get - Get the vendor specific IE by OUI
+ * @start: Pointer to the start of IEs
+ * @len: Length of IE buffer in octets
+ * @tag: IE tag
+ * @oui: IE oui
+ * Returns: Pointer to the matched IE, NULL if failed
+ */
+u8 *ieee802_11_vie_get(const u8 *start, size_t len, u8 tag, const u8 *oui)
+{
+	size_t left = len;
+	const u8 *pos = start;
+
+	while (left >= 2) {
+		u8 id, elen;
+
+		id = *pos++;
+		elen = *pos++;
+		left -= 2;
+
+		if (elen > left)
+			return NULL;
+
+		if ((id == tag) && !os_memcmp(oui, pos, 3))
+			return pos - 2;
 
+		left -= elen;
+		pos += elen;
+	}
+
+	return NULL;
+}
 
 /**
  * ieee802_11_parse_elems - Parse information elements in management frames
--- a/src/common/ieee802_11_common.h
+++ b/src/common/ieee802_11_common.h
@@ -96,6 +96,7 @@ typedef enum { ParseOK = 0, ParseUnknown = 1, ParseFailed = -1 } ParseRes;
 ParseRes ieee802_11_parse_elems(const u8 *start, size_t len,
 				struct ieee802_11_elems *elems,
 				int show_errors);
+u8 *ieee802_11_vie_get(const u8 *start, size_t len, u8 tag, const u8 *oui);
 int ieee802_11_ie_count(const u8 *ies, size_t ies_len);
 struct wpabuf * ieee802_11_vendor_ie_concat(const u8 *ies, size_t ies_len,
 					    u32 oui_type);
