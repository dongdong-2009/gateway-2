--- a/src/ap/ubus.c
+++ b/src/ap/ubus.c
@@ -403,6 +403,42 @@ hostapd_vendor_elements(struct ubus_context *ctx, struct ubus_object *obj,
 	return UBUS_STATUS_OK;
 }
 
+static int
+hostapd_bss_set_ie_filter(struct ubus_context *ctx,
+			  struct ubus_object *obj,
+			  struct ubus_request_data *req,
+			  const char *method,
+			  struct blob_attr *msg)
+{
+	struct blob_attr *tb[__VENDOR_ELEMENTS_MAX];
+	struct hostapd_data *hapd = get_hapd_from_object(obj);
+	struct hostapd_bss_config *conf = hapd->conf;
+
+	blobmsg_parse(ve_policy, __VENDOR_ELEMENTS_MAX, tb,
+		      blob_data(msg), blob_len(msg));
+
+	if (!tb[VENDOR_ELEMENTS])
+		return UBUS_STATUS_INVALID_ARGUMENT;
+
+	/* clear local cache */
+	conf->ief.tag = 0;
+
+	u8 buf[4];
+	const char *vendor_elements = blobmsg_data(tb[VENDOR_ELEMENTS]);
+
+	/* 1 byte IE tag + 3 byte OUI */
+	if (os_strlen(vendor_elements) != 8)
+		return UBUS_STATUS_INVALID_ARGUMENT;
+
+	if (hexstr2bin(vendor_elements, buf, 4))
+		return UBUS_STATUS_INVALID_ARGUMENT;
+
+	conf->ief.tag = buf[0];
+	os_memcpy(conf->ief.oui, buf + 1, 3);
+
+	return UBUS_STATUS_OK;
+}
+
 static const struct ubus_method bss_methods[] = {
 	UBUS_METHOD_NOARG("get_clients", hostapd_bss_get_clients),
 	UBUS_METHOD("del_client", hostapd_bss_del_client, del_policy),
@@ -414,6 +450,7 @@ static const struct ubus_method bss_methods[] = {
 	UBUS_METHOD("switch_chan", hostapd_switch_chan, csa_policy),
 #endif
 	UBUS_METHOD("set_vendor_elements", hostapd_vendor_elements, ve_policy),
+	UBUS_METHOD("set_ie_filter", hostapd_bss_set_ie_filter, ve_policy),
 };
 
 static struct ubus_object_type bss_object_type =
